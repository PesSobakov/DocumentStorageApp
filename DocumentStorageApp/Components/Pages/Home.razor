@page "/"
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using Azure.Storage.Blobs;

@inject Services.IAzureStorage _azureStorage

<PageTitle>Home</PageTitle>

<EditForm method="post" EditContext="CurrentEditContext" OnValidSubmit="Submit" FormName="FileEmail" enctype="multipart/form-data" Enhance>
    <DataAnnotationsValidator />
    <div asp-validation-summary="All" class="text-danger"></div>
    <table>
        <tr>
            <td> Email: </td>
            <td> <InputText @bind-Value="Model!.Email"></InputText></td>
            <td> <ValidationMessage For="()=>Model!.Email" /></td>
        </tr>
        <tr>
            <td> .docx file: </td>
            <td>
                <label>
                    <button id="button" type="button">Choose File</button>
                    <span id="span"> No file chosen </span>
                    <InputFile OnChange="(e)=>{Model.File =new FormFile( e.File.OpenReadStream(),0,e.File.Size,e.File.Name,e.File.Name);}" type="file" name="Model.File" accept=".docx" id="input" hidden></InputFile>
                </label>
            </td>
            <td> <ValidationMessage For="()=>Model!.File" /></td>
        </tr>
        <tr>
            <td> <button type="submit">Send</button></td>
        </tr>
    </table>
</EditForm>

<script defer>
    events = ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'];
    for (const event of events) {
        document.getElementById('button').addEventListener(event, (e) =>
        {
            e.stopPropagation();
            e.preventDefault();
        })
        document.getElementById('span').addEventListener(event, (e) =>
        {
            e.stopPropagation();
            e.preventDefault();
        })
    }
    function dropFile(e)
    {
        document.getElementById('input').files = e.dataTransfer.files;
        document.getElementById('span').innerHTML = e.dataTransfer.files[0].name;
        if (document.getElementById('input').files[0] == undefined) console.log(1);
    }
    document.getElementById('button').addEventListener('drop', (e) =>
    {
        dropFile(e);
    })
    document.getElementById('button').addEventListener('click', (e) =>
    {
        document.getElementById('input').click();
    })
    document.getElementById('span').addEventListener('drop', (e) =>
    {
        dropFile(e);
    })
    document.getElementById('input').addEventListener('change', (e) =>
    {
        if (document.getElementById('input').files[0] != undefined) {
            document.getElementById('span').innerHTML = document.getElementById('input').files[0].name;
        }
        else {
            document.getElementById('span').innerHTML = 'No file chosen';
        }
    })
</script>

@code {
    [CascadingParameter]
    private EditContext? CurrentEditContext { get; set; }

    [SupplyParameterFromForm]
    public FileEmailViewModel? Model { get; set; }

    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        Model ??= new();
        CurrentEditContext = new(Model);
        messageStore = new(CurrentEditContext);
    }

    private async void Submit()
    {
        if (!Model!.File.FileName.EndsWith(".docx"))
        {
            messageStore?.Add(() => Model.File, "Wrong extension, choose .docx file");
        }
        if ((!CurrentEditContext!.IsValid(new FieldIdentifier(Model, "File")) )|| (!CurrentEditContext!.IsValid(new FieldIdentifier(Model, "Email"))))
        {
            return;
        }

        MemoryStream memoryStream = new MemoryStream();
        Model!.File.OpenReadStream().CopyTo(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin);
        await _azureStorage.UploadAsync(Model!.File.FileName, memoryStream, Model!.Email);
    }

    public class FileEmailViewModel
    {
        [Required(ErrorMessage = "This field is required")]
        public IFormFile File { get; set; }

        [Required(ErrorMessage = "This field is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
    }
}
